{"version":3,"sources":["components/js/Global.js","components/js/Landing.js","components/js/Keys.js","components/js/App.js","serviceWorker.js","index.js"],"names":["GlobalContext","React","createContext","GlobalProvider","children","useState","startState","setStartState","inputName","setInputName","timerState","setTimerState","Provider","value","Landing","useForm","register","handleSubmit","useContext","useEffect","Input","label","required","name","ref","Col","xs","md","lg","className","onSubmit","data","type","Keys","value1","setValue1","value2","setValue2","calState","setCalState","answer","setAnswer","timer","setTimer","increment","useRef","current","clearInterval","console","log","setInterval","BackButton","Button","size","variant","onClick","event","DisplayName","formatTime","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","Items","item","val","items","i","push","key","Display","id","disabled","Equal","OthersBtn","parseInt","cals","map","currentTarget","handleCalPad","keys","handleKeyPad","Row","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8dc38837.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const GlobalContext = React.createContext({});\n\nexport const GlobalProvider = ({\n    children\n}) => {\n    const [startState, setStartState] = useState(false);\n    const [inputName, setInputName] = useState(\"\");\n    const [timerState, setTimerState] = useState(false)\n\n    return (\n        <GlobalContext.Provider\n            value={{\n                startState,\n                setStartState,\n                inputName,\n                setInputName,\n                timerState,\n                setTimerState\n            }}\n        >\n            {children}\n        </GlobalContext.Provider>\n    );\n};","import React, { useEffect, useContext } from 'react';\nimport '../../static/Landing.css'\nimport { useForm } from 'react-hook-form'\nimport { Col } from 'react-bootstrap';\nimport { GlobalContext } from '../js/Global';\nimport Typist from 'react-typist'\n\n\nfunction Landing() {\n  const { register, handleSubmit } = useForm(\"\");\n  const { startState, setStartState } = useContext(GlobalContext)\n  const { inputName, setInputName } = useContext(GlobalContext)\n\n  useEffect(() => { }, [startState]);\n  useEffect(() => { }, [inputName]);\n\n  const Input = ({ label, register, required }) => (\n    <>\n      <h4>Practice for Single Digit Calculator</h4>\n      <h3>Start with your name</h3>\n      <input name={label} ref={register({ required })} />\n    </>\n  );\n\n  function onSubmit(data) {\n    setInputName(data['Name'])\n    setStartState(true)\n  }\n\n  return (\n    <Col xs={12} md={12} lg={12} >\n      <div className=\"landing-section\">\n        <Typist className=\"landing-margin\">\n          <h1>Cal Kids</h1>\n        </Typist>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Input label=\"Name\" register={register} required />\n          <input type=\"submit\" value=\"Start\" />\n        </form>\n      </div>\n    </Col>\n  )\n}\n\nexport default Landing;","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport '../../static/Keys.css'\nimport { Row, Col, Button } from 'react-bootstrap';\nimport { GlobalContext } from '../js/Global';\n\n\nfunction Keys() {\n  const keysdata = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n  const calsdata = ['+', '-', 'x', 'รท']\n\n  const [value1, setValue1] = useState(\"\")\n  const [value2, setValue2] = useState(\"\")\n  const [calState, setCalState] = useState(\"+\")\n  const [answer, setAnswer] = useState(\"\")\n  const { startState, setStartState } = useContext(GlobalContext)\n  const { inputName, setInputName } = useContext(GlobalContext)\n  const [timer, setTimer] = useState(0)\n  const increment = useRef(null)\n  const { timerState, setTimerState } = useContext(GlobalContext)\n\n  useEffect(() => { }, [value1]);\n  useEffect(() => { }, [value2]);\n  useEffect(() => { }, [calState]);\n  useEffect(() => { }, [answer]);\n  useEffect(() => { }, [inputName]);\n  useEffect(() => { }, [timer]);\n  useEffect(() => {\n    if (increment.current !== null) {\n      clearInterval(increment.current)\n      setTimer(0)\n      setTimerState(false)\n    }\n    if (!timerState) {\n      console.log(\"hello\")\n      handleStart()\n      setTimerState(true)\n    }\n  }, [startState])\n\n  function handleBack() {\n    clearInterval(increment.current)\n    setTimer(0)\n    setTimerState(false)\n    setStartState(false)\n  }\n\n  const BackButton = () => {\n    return (\n      <Button\n        size=\"lg\"\n        variant=\"back\"\n        className=\"backpad\"\n        onClick={(event) => handleBack()}\n      >\n        BACK\n      </Button>\n    )\n  }\n\n  const DisplayName = () => {\n    return (\n      <h2>PLAYING: {inputName} ({formatTime()})</h2>\n    )\n  }\n\n  function handleStart() {\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n  }\n\n  const formatTime = () => {\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\n    const minutes = `${Math.floor(timer / 60)}`\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\n  }\n\n  function handleAns() {\n    if (value1 !== \"\" && value2 !== \"\") {\n      if (calState === \"+\") {\n        setAnswer(parseInt(value1) + parseInt(value2))\n      } else if (calState === \"-\") {\n        setAnswer(parseInt(value1) - parseInt(value2))\n      } else if (calState === \"x\") {\n        setAnswer(parseInt(value1) * parseInt(value2))\n      } else {\n        setAnswer(parseInt(value1) / parseInt(value2))\n      }\n    }\n  }\n\n  function handleCalPad(event) {\n    setCalState(event.currentTarget.value)\n  }\n\n  function handleClear(event) {\n    setValue1(\"\")\n    setValue2(\"\")\n    setCalState(\"+\")\n    setAnswer(\"\")\n  }\n\n  const Items = (item, val) => {\n    if (val === \"\") {\n      return (\n        <div className={`value-display ${item}-section`}>\n          <h3>{item}: </h3>\n        </div>\n      )\n    } else {\n      const items = []\n      for (var i = 0; i < val; i++) {\n        items.push(<li key={i} className=\"apple\"></li>)\n      }\n      return (\n        <div className={`value-display ${item}-section`}>\n          <h3>{item}: {val} </h3>\n          {items}\n        </div>)\n    }\n  }\n\n  const Display = () => {\n    return (\n      <div id=\"display\">\n        {Items(\"Value1\", value1)}\n        <Button\n          size=\"lg\"\n          variant=\"primary\"\n          disabled\n        >\n          {calState}\n        </Button>\n        {Items(\"Value2\", value2)}\n      </div>\n    )\n  }\n\n  const Equal = () => {\n    return (\n      <Button\n        size=\"lg\"\n        variant=\"primary\"\n        disabled\n      >\n        =\n      </Button>\n    )\n  }\n\n  function handleKeyPad(event) {\n    if (value1 === \"\") {\n      setValue1(event.currentTarget.value)\n    } else if (value2 === \"\") {\n      setValue2(event.currentTarget.value)\n    }\n  }\n\n  const OthersBtn = () => {\n    return (\n      <>\n        <Button\n          size=\"lg\"\n          variant=\"warning\"\n          className=\"clearpad\"\n          onClick={(event) => handleClear()}\n        >\n          Clear\n        </Button>\n        <Button\n          size=\"lg\"\n          variant=\"info\"\n          className=\"enterpad\"\n          onClick={() => handleAns()}\n        >\n          Enter\n        </Button>\n      </>\n    )\n  }\n\n  const cals = calsdata.map((data) => (\n    <Button\n      size=\"lg\"\n      variant=\"primary\"\n      key={data}\n      className=\"calpad\"\n      value={data}\n      onClick={(event) => handleCalPad(event)}\n    >\n      {data}\n    </Button>\n  ));\n\n  const keys = keysdata.map((data) => (\n    <Button\n      size=\"lg\"\n      variant=\"success\"\n      key={data}\n      className=\"keypad\"\n      value={data}\n      onClick={(event) => handleKeyPad(event)}\n    >\n      {data}\n    </Button>\n  ));\n\n  return (\n    <Col className=\"keys-section\" xs={12} md={12} lg={12}>\n      <Col className=\"header-section\" xs={10} md={10} lg={10}>\n        <BackButton />\n        <DisplayName />\n      </Col>\n      <Row>\n        <Col className=\"sub-section\" xs={10} md={10} lg={3}>\n          <Display />\n        </Col>\n        <Col className=\"equal-section sub-section\" xs={10} md={10} lg={1}>\n          <Equal />\n        </Col>\n        <Col className=\"sub-section\" xs={10} md={6} lg={6}>\n          {Items(\"Answer\", answer)}\n        </Col>\n      </Row>\n      <Col className=\"pads-section\" xs={10} md={6} lg={5}>\n        <div id=\"pads\">\n          <div id=\"calkey\">\n            <div id=\"cal\">\n              {cals}\n            </div>\n            <div id=\"key\">\n              {keys}\n            </div>\n          </div>\n          <div id=\"other\">\n            <OthersBtn />\n          </div>\n        </div>\n      </Col>\n    </Col>\n  );\n}\n\nexport default Keys;","import React, { useContext } from 'react';\nimport '../../static/App.css';\nimport Landing from '../js/Landing'\nimport Keys from '../js/Keys'\nimport { GlobalContext } from '../js/Global';\n\n\nfunction App() {\n  const { startState, setStartState } = useContext(GlobalContext)\n  \n  if (startState) {\n    return (\n      <div className=\"App\">\n        <Keys />\n      </div>\n    );\n  }\n  return (\n    <div className=\"App\">\n      <Landing />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/js/App';\nimport * as serviceWorker from './serviceWorker';\nimport { GlobalProvider } from './components/js/Global';\n\n\nReactDOM.render(\n  <GlobalProvider>\n    <App />\n  </GlobalProvider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}